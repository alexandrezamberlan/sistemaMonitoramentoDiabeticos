# Generated by Django 4.2.22 on 2025-06-11 21:21

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('tipo_evento', '0001_initial'),
        ('instituicao', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Evento',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(db_index=True, help_text='* Campo obrigatório', max_length=150, verbose_name='Nome do evento *')),
                ('descricao', models.TextField(blank=True, help_text='Coque aqui uma descrição do evento para ajudar os autores a submeterem seus trabalhos', max_length=500, null=True, verbose_name='Descrição do evento')),
                ('site', models.URLField(blank=True, help_text='Informe o site oficial do evento', max_length=100, null=True, verbose_name='Site do evento')),
                ('grupo', models.CharField(help_text='* Campo obrigatório', max_length=150, null=True, verbose_name='Departamento ou Setor ou Grupo responsável pelo evento *')),
                ('data_inicio', models.DateField(help_text='Use dd/mm/aaaa', max_length=10, null=True, verbose_name='Data do evento *')),
                ('hora_inicio', models.TimeField(help_text='Use hh:mm', null=True, verbose_name='Hora de início do evento *')),
                ('email', models.EmailField(blank=True, help_text='Campo opcional, caso o evento seja de submissão de trabalhos.', max_length=100, null=True, verbose_name='Email oficial da organização')),
                ('data_inscricao', models.DateField(help_text='Use dd/mm/aaaa', max_length=10, null=True, verbose_name='Data limite de inscrição ao evento *')),
                ('carga_horaria', models.DecimalField(decimal_places=0, default=1, max_digits=4, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(12)], verbose_name='Carga horária do evento ')),
                ('local', models.CharField(blank=True, help_text='Informe detalhes do local, como sala, prédio, conjunto, etc.', max_length=300, null=True, verbose_name='Local do evento')),
                ('lotacao', models.DecimalField(decimal_places=0, max_digits=4, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(9999)], verbose_name='Lotação máxima do local do evento ')),
                ('frequencia_liberada', models.BooleanField(default=False, help_text='Se liberada, o evento permite que os participantes solicitem a frequência', verbose_name='Libera a frequência')),
                ('codigo_frequencia', models.CharField(help_text='Código que será utilizado para solicitar a frequência do evento. Deve ser informado ao participante no final do evento.', max_length=20, null=True, verbose_name='Código de frequência')),
                ('is_active', models.BooleanField(default=True, help_text='Se ativo, o evento está liberado para chamada de artigos', verbose_name='Ativo')),
                ('slug', models.SlugField(blank=True, max_length=200, null=True, verbose_name='Hash')),
                ('coordenador', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='coordenador', to=settings.AUTH_USER_MODEL, verbose_name='Coordenador responsável *')),
                ('instituicao', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='instituicao', to='instituicao.instituicao', verbose_name='Instituição responsável pelo evento *')),
                ('tipo', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='tipo_evento', to='tipo_evento.tipoevento', verbose_name='Tipo do evento *')),
            ],
            options={
                'verbose_name': 'evento',
                'verbose_name_plural': 'eventos',
                'ordering': ['-is_active', '-data_inscricao', 'nome'],
                'unique_together': {('nome', 'data_inicio')},
            },
        ),
    ]
